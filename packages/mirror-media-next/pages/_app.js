import React, { useEffect } from 'react'
import { GlobalStyles } from '../styles/global-styles'
import { ThemeProvider } from 'styled-components'
import { theme } from '../styles/theme'
import { ApolloProvider } from '@apollo/client'
import client from '../apollo/apollo-client'
import * as gtag from '../utils/gtag'
import TagManager from 'react-gtm-module'
import { API_TIMEOUT, ENV, GTM_ID } from '../config/index.mjs'
import WholeSiteScript from '../components/whole-site-script'
import { auth } from '../firebase'
import axios from 'axios'
import { WEEKLY_API_SERVER_ORIGIN } from '../config/index.mjs'

/**
 *
 * @param {Object} props
 * @param {React.ElementType} props.Component
 * @param {Object} props.pageProps
 * @param {Object[]} props.sectionsData
 * @param {Object[]} props.topicsData
 * @returns {React.ReactElement}
 */
function MyApp({ Component, pageProps }) {
  useEffect(() => {
    /**
     * Use function `getIdToken` to get a Firebase JWT Token
     * Return a token string if success, return null if failed.
     * If return `null`, which means some unexpected error occurred on Firebase.
     * @see https://firebase.google.com/docs/reference/js/auth.user.md#usergetidtoken
     *
     * @param {import('firebase/auth').User} user
     * @returns {Promise<import('firebase/auth').IdTokenResult["token"]| null>}
     */
    const getIdToken = async (user) => {
      try {
        const idToken = await user.getIdToken()
        return idToken
      } catch (err) {
        console.warn(err)
        return null
      }
    }

    const handleFirebaseAuthStateChanged = async (user) => {
      if (user) {
        const idToken = await getIdToken(user)

        if (!idToken) {
          return
        }

        /**
         * Get user Access Token.
         * Access Token is generated by WAS(weekly-api-server).
         * It is need to send post request to `/access-token` and set Firebase id token as a authorization header,
         * WAS will verify Firebase id token and return Access Token if success.
         * By using Access Token, user can access information of certain member account, read member article if has corresponding permissions.
         * @see https://github.com/mirror-media/Adam/blob/dev/packages/weekly-api-server/README.md
         */
        try {
          const res = await axios({
            method: 'post',
            url: `https://${WEEKLY_API_SERVER_ORIGIN}/access-token`,
            headers: {
              authorization: `Bearer ${idToken}`,
            },
            timeout: API_TIMEOUT,
          })
          // TODO: store accessToken in `useContext`, so other page or component can use access token to detect member type, get member article content, etc.
          const accessToken = res?.data?.data['access_token']
          if (accessToken) {
            console.log('Has access token, hurray!')
          }
        } catch (error) {
          /**
           * There are two situations that need to be handled:
           * 1. Firebase id Token is verified by WAS, but it is an invalid id token. The status code is 401.
           * 2. WAS has some unexpected error, such as unable to sign in JWT token, or unable to request GQL server. The status code is 500.
           */
          const statusCode = error?.response?.status
          switch (statusCode) {
            case 401:
              // TODO: Logout Firebase.
              break
            case 500:
              // TODO: Send this error to our GCP log viewer by using [Beacon API](https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API).
              // TODO: Logout Firebase.
              console.warn(error)
              break
            default:
              // TODO: Logout Firebase.
              console.warn(error)
              break
          }
        }
      } else {
        /**
         * TODO: In future, we might store user Access Token (or other member information) in useContext or Redux.
         * If there is a possible situation that the user is not logged in to firebase, but has Access Token in useContext or Redux,
         * we have to clear it.
         */
        console.log('no user')
      }
    }

    auth.onAuthStateChanged(handleFirebaseAuthStateChanged)
  }, [])

  //Temporarily enable google analytics and google tag manager only in dev and local environment.
  useEffect(() => {
    if (ENV === 'dev' || ENV === 'local') {
      gtag.init()
      TagManager.initialize({ gtmId: GTM_ID })
    }
  }, [])
  return (
    <>
      <GlobalStyles />
      <ApolloProvider client={client}>
        <ThemeProvider theme={theme}>
          {/* some script may need member type to decide render or not,
           make sure the WholeSiteScript component is placed inside contextProvider or other provider  */}
          <WholeSiteScript />
          <Component {...pageProps} />
        </ThemeProvider>
      </ApolloProvider>
    </>
  )
}

export default MyApp
